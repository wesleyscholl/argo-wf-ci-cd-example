metadata:
  name: ci-workflow
  namespace: argo
spec:
  templates:
    - name: main
      inputs: {}
      outputs: {}
      metadata: {}
      steps:
        - - name: clone-repo
            template: clone-repo
            arguments:
              parameters:
                - name: repo
                  value: '{{workflow.parameters.repo}}'
                - name: branch
                  value: '{{workflow.parameters.branch}}'
        - - name: build-executor
            template: golang-task
            arguments:
              parameters:
                - name: commands
                  value: >
                    echo 'Building Argo Executor...'

                    apt-get update && apt-get install -y curl

                    curl -fsSL https://deb.nodesource.com/setup_20.x | bash -

                    apt-get install -y nodejs

                    npm install -g yarn@latest

                    cd /work

                    make controller kit STATIC_FILES=false

                    [ -f /work/executor ] && echo 'Executor build successful.'
                    || (echo 'Executor build failed.' && exit 1)

                    echo /work/executor

                    echo 'Argo Executor build complete'
        - - name: build-cli
            template: golang-task
            arguments:
              parameters:
                - name: commands
                  value: >
                    echo 'Building Argo CLI...'

                    apt-get update && apt-get install -y curl

                    curl -fsSL https://deb.nodesource.com/setup_20.x | bash -

                    apt-get install -y nodejs

                    npm install -g yarn@latest

                    cd /work

                    make cli STATIC_FILES=false

                    [ -f /work/dist/argo ] && echo 'Argo CLI build successful.'
                    || (echo 'Argo CLI build failed.' && exit 1)

                    echo /work/dist/argo

                    echo 'Argo CLI build complete'
        - - name: create-exec-image
            template: create-image
            arguments:
              parameters:
                - name: path
                  value: '{{workflow.parameters.path}}'
                - name: image
                  value: '{{workflow.parameters.exec-image}}'
        - - name: create-cli-image
            template: create-image
            arguments:
              parameters:
                - name: path
                  value: '{{workflow.parameters.path}}'
                - name: image
                  value: '{{workflow.parameters.cli-image}}'
        - - name: run-tests
            template: golang-task
            arguments:
              parameters:
                - name: commands
                  value: >
                    echo 'Running unit tests...'

                    make test STATIC_FILES=false GOTEST='go test -p 20
                    -covermode=atomic -coverprofile=coverage.out'

                    [ -f /work/coverage.out ] && echo 'Unit tests passed.' ||
                    (echo 'Unit tests failed.' && exit 1)

                    echo 'Unit tests completed.'
        - - name: run-coverage
            template: golang-task
            arguments:
              parameters:
                - name: commands
                  value: >
                    echo 'Collecting code coverage...'

                    make coverage STATIC_FILES=false

                    go tool cover -func=coverage.out

                    [ -f /work/coverage.out ] && echo 'Coverage report
                    collected.' || (echo 'Coverage report failed.' && exit 1)

                    echo 'Coverage report collected.'
    - name: clone-repo
      inputs:
        parameters:
          - name: repo
          - name: branch
      outputs: {}
      metadata: {}
      container:
        name: ''
        image: alpine/git:v2.26.2
        args:
          - clone
          - '--depth'
          - '1'
          - '--branch'
          - '{{=sprig.trimPrefix("refs/heads/",inputs.parameters.branch)}}'
          - '--single-branch'
          - '{{inputs.parameters.repo}}'
          - .
        workingDir: /work
        resources:
          requests:
            cpu: '1'
            memory: 2Gi
        volumeMounts:
          - name: work
            mountPath: /work
    - name: golang-task
      inputs:
        parameters:
          - name: commands
      outputs: {}
      metadata: {}
      container:
        name: ''
        image: golang:1.23
        command:
          - /bin/sh
          - '-c'
        args:
          - '{{inputs.parameters.commands}}'
        workingDir: /work/
        env:
          - name: GO111MODULE
            value: 'on'
        resources:
          requests:
            cpu: '2'
            memory: 4Gi
        volumeMounts:
          - name: work
            mountPath: /work
    - name: create-image
      inputs:
        parameters:
          - name: path
          - name: image
      outputs: {}
      metadata: {}
      container:
        name: ''
        image: moby/buildkit:v0.9.3-rootless
        command:
          - buildctl-daemonless.sh
        args:
          - build
          - '--frontend'
          - dockerfile.v0
          - '--local'
          - context=.
          - '--local'
          - dockerfile=.
          - '--output'
          - type=image,name=docker.io/{{inputs.parameters.image}},push=true
        workingDir: /work/
        env:
          - name: BUILDKITD_FLAGS
            value: '--oci-worker-no-process-sandbox'
          - name: DOCKER_CONFIG
            value: /.docker
        resources:
          requests:
            cpu: '2'
            memory: 4Gi
        volumeMounts:
          - name: work
            mountPath: /work
          - name: docker-config
            mountPath: /.docker
        readinessProbe:
          exec:
            command:
              - sh
              - '-c'
              - buildctl debug workers
      volumes:
        - name: docker-config
          secret:
            secretName: docker-config
  entrypoint: main
  arguments:
    parameters:
      - name: repo
        value: https://github.com/konjo-open-src/argo-workflows
      - name: branch
        value: refs/heads/main
      - name: name
        value: wesleyscholl
      - name: email
        value: 128409641+wesleyscholl@users.noreply.github.com
      - name: path
        value: argo-workflows
      - name: cli-image
        value: wesmsl/argocli:v1
      - name: exec-image
        value: wesmsl/argoexec:v1
      - name: tag
        value: v1
  serviceAccountName: argo-workflow-sa
  volumeClaimTemplates:
    - metadata:
        name: work
        creationTimestamp: null
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 2Gi
      status: {}
