kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: operate-workflow-role
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
  - apiGroups: ["argoproj.io"]
    resources: ["workflows", "workflowtemplates"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
EOF

---
# Service Account
kubectl apply -f - <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-workflow-sa
  namespace: argo
EOF

# Role
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-pod-patcher
  namespace: argo
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "patch", "watch"]
EOF

# RoleBinding
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-pod-patcher-binding
  namespace: argo
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: argo-pod-patcher
subjects:
  - kind: ServiceAccount
    name: argo-workflow-sa
    namespace: argo
EOF

---
# ArgoCD
# Apply the ClusterRole
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: networkpolicy-reader
rules:
- apiGroups: ["networking.k8s.io","apps", "", "rbac.authorization.k8s.io", "events.k8s.io", "storage.k8s.io", "batch", "extensions", "autoscaling", "policy", "argoproj.io", "apiextensions.k8s.io"]
  resources: ["networkpolicies", "deployments", "services", "statefulsets", "pods", "configmaps", "secrets", "ingresses", "endpoints", "persistentvolumeclaims", "persistentvolumes", "namespaces", "events", "customresourcedefinitions", "serviceaccounts", "roles", "clusterroles", "rolebindings", "clusterrolebindings"]
  verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
EOF

# Apply the RoleBinding
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-workflow-networkpolicy-reader
  namespace: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: networkpolicy-reader
subjects:
- kind: ServiceAccount
  name: argo-workflow-sa
  namespace: argo
EOF

# Apply the ClusterRoleBinding
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-workflow-networkpolicy-reader
  namespace: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: networkpolicy-reader
subjects:
- kind: ServiceAccount
  name: argo-workflow-sa
  namespace: argo
EOF
---

# ClusterRoleBinding binding for the service account above

kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: operate-workflow-role-binding
subjects:
  - kind: ServiceAccount
    name: operate-workflow-sa
    namespace: po-optimization
roleRef:
  kind: ClusterRole
  name: operate-workflow-role
  apiGroup: rbac.authorization.k8s.io
EOF


kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-workflow-cluster-role
rules:
  - apiGroups: ["", "apps", "rbac.authorization.k8s.io"]
    resources: ["deployments", "clusterrolebindings", "namespaces"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
EOF



kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-workflow-sa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-workflow-cluster-role
subjects:
  - kind: ServiceAccount
    name: operate-workflow-sa
    namespace: argo-events
EOF