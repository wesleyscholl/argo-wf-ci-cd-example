kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: operate-workflow-role
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
  - apiGroups: ["argoproj.io"]
    resources: ["workflows", "workflowtemplates"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
EOF

---
# Service Account
kubectl apply -f - <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-workflow-sa # Name of the service account
  namespace: argo # Apply the service account to the Argo namespace
EOF

# Role
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-pod-patcher # Name of the role
  namespace: argo # Apply the role to the Argo namespace
rules:
  - apiGroups: [""] 
    resources: ["pods"] # Apply the role to pods
    verbs: ["get", "list", "patch", "watch"] # Allow the service account to get, list, patch, and watch pods
  - apiGroups: ["argoproj.io"] 
    resources: ["workflows"] # Apply the role to workflows
    verbs: ["create"] # Allow the service account to create workflows
  - apiGroups: ["argoproj.io"] 
    resources: ["workflowtemplates"] # Apply the role to workflow templates
    verbs: ["get", "list"] # Allow the service account to get and list workflow templates
EOF

# RoleBinding
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-pod-patcher-binding # Name of the role binding
  namespace: argo # Apply the role binding to the Argo namespace
roleRef:
  apiGroup: rbac.authorization.k8s.io 
  kind: Role 
  name: argo-pod-patcher # Reference the role
subjects:
  - kind: ServiceAccount 
    name: argo-workflow-sa # Reference the service account
    namespace: argo # Reference the namespace
EOF

---
# ArgoCD
# Apply the ClusterRole
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: networkpolicy-reader
rules:
- apiGroups: ["networking.k8s.io","apps", "", "rbac.authorization.k8s.io", "events.k8s.io", "storage.k8s.io", "batch", "extensions", "autoscaling", "policy", "argoproj.io", "apiextensions.k8s.io"]
  resources: ["networkpolicies", "deployments", "services", "statefulsets", "pods", "configmaps", "secrets", "ingresses", "endpoints", "persistentvolumeclaims", "persistentvolumes", "namespaces", "events", "customresourcedefinitions", "serviceaccounts", "roles", "clusterroles", "rolebindings", "clusterrolebindings"]
  verbs: ["get", "list", "watch", "create", "delete", "update", "patch"]
EOF

# Apply the RoleBinding
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-workflow-networkpolicy-reader
  namespace: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: networkpolicy-reader
subjects:
- kind: ServiceAccount
  name: argo-workflow-sa
  namespace: argo
EOF

# Apply the ClusterRoleBinding
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-workflow-networkpolicy-reader
  namespace: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: networkpolicy-reader
subjects:
- kind: ServiceAccount
  name: argo-workflow-sa
  namespace: argo
EOF
---
kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-server-configmap-reader
  namespace: argo-workflows
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
EOF

kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-server-configmap-reader-binding
  namespace: argo-workflows
subjects:
- kind: ServiceAccount
  name: argo-server
  namespace: argo-workflows
roleRef:
  kind: Role
  name: argo-server-configmap-reader
  apiGroup: rbac.authorization.k8s.io
EOF

kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argo-workflow-controller-configmap
  namespace: argo-workflows
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argo-workflow-controller-configmap
  namespace: argo-workflows
subjects:
- kind: ServiceAccount
  name: argo
  namespace: argo-workflows
roleRef:
  kind: Role
  name: argo-workflow-controller-configmap
  apiGroup: rbac.authorization.k8s.io
EOF

# ClusterRoleBinding binding for the service account above

kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: operate-workflow-role-binding
subjects:
  - kind: ServiceAccount
    name: operate-workflow-sa
    namespace: po-optimization
roleRef:
  kind: ClusterRole
  name: operate-workflow-role
  apiGroup: rbac.authorization.k8s.io
EOF


kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-workflow-cluster-role
rules:
  - apiGroups: ["", "apps", "rbac.authorization.k8s.io"]
    resources: ["deployments", "clusterrolebindings", "namespaces"]
    verbs: ["create", "get", "list", "watch", "update", "delete"]
EOF

# ArgoCD Secret - server, username, password
kubectl apply -f - <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: argocd-env-secret
  namespace: argo
type: Opaque
stringData:
  server: argocd-server.argocd.svc.cluster.local
  username: admin
  password: Iwr5ub9ttIC850ea
EOF


# NetworkPolicy for ArgoCD

kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-argocd-sync # Name of the NetworkPolicy
  namespace: argocd # Apply the NetworkPolicy to the ArgoCD namespace
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: argocd-server # Select the ArgoCD server pod
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: argo # Allow traffic from the Argo namespace
  policyTypes:
  - Ingress # Only allow ingress traffic
EOF

# ArgoCD Service - Creates a service for the ArgoCD server to be accessed by the ArgoCD CLI
kubectl apply -f - <<EOF
apiVersion: v1
kind: Service
metadata:
  name: argocd-server # Name of the service
  namespace: argocd # Apply the service to the ArgoCD namespace
spec:
  ports:
  - name: http # Name of the port
    port: 80 # Port to expose
    targetPort: 8080 # Port to forward traffic to
  - name: https # Name of the port
    port: 443 # Port to expose
    targetPort: 8080 # Port to forward traffic to
  selector:
    app.kubernetes.io/name: argocd-server # Select the ArgoCD server pod
EOF


kubectl apply -f - <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-workflow-sa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-workflow-cluster-role
subjects:
  - kind: ServiceAccount
    name: operate-workflow-sa
    namespace: argo-events
EOF


kubectl apply -f - <<EOF
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-agent-config
  namespace: po-optimization
data:
  otel-agent-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: "0.0.0.0:4317"
          http:
            endpoint: "0.0.0.0:4318"
    exporters:
      otlp:
        endpoint: "otel-collector-service.monitoring.svc.cluster.local:4317"
        tls:
          insecure: true
    service:
      pipelines:
        traces:
          receivers: [otlp]
          exporters: [otlp]
      telemetry:
        logs:
          level: "debug"
EOF

kubectl apply -f - <<EOF
apiVersion: argoproj.io/v1alpha1
kind: WorkflowEventBinding
metadata:
  name: event-consumer
  namespace: argo
spec:
  event:
    selector: payload.repo != "" && payload.branch != "" && payload.pusher.name != "" && payload.pusher.email != "" # To evaluate properties and values within the payload
  submit:
    workflowTemplateRef:
      name: ci-workflow # Name of the WorkflowTemplate to trigger
    arguments:
      parameters: # Parameters to pass to the WorkflowTemplate
        - name: repo
          valueFrom:
            event: payload.repository.html_url # GitHub url
        - name: branch
          valueFrom:
            event: payload.ref # GitHub ref branch
        - name: name
          valueFrom:
            event: payload.pusher.name # GitHub user name
        - name: email
          valueFrom:
            event: payload.pusher.email # GitHub user email
EOF