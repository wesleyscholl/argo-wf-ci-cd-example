Argo Workflows Multi-Pod Resource Example

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: multi-resource-workflow-
spec:
  entrypoint: main
  templates:
    # CPU-Intensive Template
    - name: cpu-intensive-template
      # Specifies resource requirements for CPU-heavy workload
      container:
        image: python:3.9
        command: [python, -c]
        args: ["import multiprocessing; print(f'CPU Cores: {multiprocessing.cpu_count()}'); import time; time.sleep(60)"]
        resources:
          requests:
            cpu: "2"  # Request 2 full CPU cores
            memory: 4Gi
          limits:
            cpu: "4"  # Limit to 4 CPU cores
            memory: 8Gi
      # Node selector to target CPU-optimized nodes
      nodeSelector:
        nodeType: cpu-optimized

    # GPU-Intensive Template
    - name: gpu-intensive-template
      # Specifies resource requirements for GPU workload
      container:
        image: nvidia/cuda:11.0-base
        command: ["/bin/bash", "-c"]
        args: ["nvidia-smi; sleep 60"]  # Display GPU information
        resources:
          requests:
            nvidia.com/gpu: 1  # Request 1 GPU
          limits:
            nvidia.com/gpu: 1  # Limit to 1 GPU
      # Node selector to target GPU-enabled nodes
      nodeSelector:
        accelerator: nvidia-gpu


# Volumes act as shared storage mechanisms within the same pod or workflow, enabling immediate data exchange between containers. They are primarily suited for short-lived data sharing within a single workflow execution, also known as ephemeral storage. For a long-term data storage volume, configure a Persistent Volume Claim (PVC) instead.


# Artifacts provide a more flexible mechanism for data transfer, supporting persistent storage and versioning. They can be used across workflow steps, even across pods or clusters, and are particularly useful for caching and transferring data. Artifacts are stored in a central repository, such as S3, Minio or Google Cloud Storage (GCS), and can be shared across steps, tasks, pods, containers, workflows, namespaces or clusters.


apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: artifact-passing-
spec:
  entrypoint: artifact-example
  templates:
    - name: artifact-example
      steps:
        - - name: generate-artifact
            template: hello-world-to-file
        - - name: consume-artifact
            template: print-message-from-file
            arguments:
              artifacts: # Specifies the artifact argument
                - name: message # Artifact name
                  from: "{{steps.generate-artifact.outputs.artifacts.hello-art}}" # Path to the artifact, using the output artifact name from the previous step

    - name: hello-world-to-file
      container:
        image: busybox
        command: [sh, -c]
        args: ["sleep 1; echo hello world | tee /tmp/hello_world.txt"] # Writes hello world to /tmp/hello_world.txt
      outputs:
        artifacts: # Specifies the output artifact
          - name: hello-art # Artifact name
            path: /tmp/hello_world.txt # Path to the artifact

    - name: print-message-from-file
      inputs:
        artifacts: # Specifies the artifact input
          - name: message # Artifact name
            path: /tmp/message # Path to the artifact
      container:
        image: alpine:latest
        command: [sh, -c]
        args: ["cat /tmp/message"] # Reads and prints the message from the artifact