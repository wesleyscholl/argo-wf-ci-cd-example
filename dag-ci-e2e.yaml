metadata:
  name: dag-ci-cd-workflow
  namespace: argo
  uid: 0103a56d-c546-475a-bf87-2abfd8b6452c
  resourceVersion: "372057"
  generation: 36
  creationTimestamp: "2024-11-21T22:51:22Z"
  labels:
    workflows.argoproj.io/creator: system-serviceaccount-argo-argo-server
  managedFields:
    - manager: argo
      operation: Update
      apiVersion: argoproj.io/v1alpha1
      time: "2024-11-22T21:07:15Z"
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:workflows.argoproj.io/creator: {}
        f:spec: {}
spec:
  templates:
    - name: e2e-tests
      inputs: {}
      outputs: {}
      metadata: {}
      steps:
        - - name: e2e-tests-dag
            template: e2e-tests-dag
            arguments:
              parameters:
                - name: test
                  value: "{{item.test}}"
                - name: install_k3s_version
                  value: "{{item.install_k3s_version}}"
                - name: profile
                  value: "{{item.profile}}"
                - name: use-api
                  value: "{{item.use-api}}"
            withParam: "{{workflow.parameters.test-matrix}}"
    - name: e2e-tests-dag
      inputs:
        parameters:
          - name: test
          - name: install_k3s_version
          - name: profile
          - name: use-api
      outputs: {}
      metadata: {}
      dag:
        tasks:
          - name: clone-repo
            template: clone-repo
            arguments:
              parameters:
                - name: repo
                  value: "{{workflow.parameters.repo}}"
                - name: branch
                  value: "{{workflow.parameters.branch}}"
          - name: setup-k3s
            template: ubuntu-container
            arguments:
              parameters:
                - name: test
                  value: "{{inputs.parameters.test}}"
                - name: install_k3s_version
                  value: "{{inputs.parameters.install_k3s_version}}"
                - name: profile
                  value: "{{inputs.parameters.profile}}"
                - name: use-api
                  value: "{{inputs.parameters.use-api}}"
            dependencies:
              - clone-repo
    - name: clone-repo
      inputs:
        parameters:
          - name: repo
          - name: branch
      outputs: {}
      metadata: {}
      container:
        name: ""
        image: alpine/git:v2.26.2
        args:
          - clone
          - "--depth"
          - "1"
          - "--branch"
          - '{{=sprig.trimPrefix("refs/heads/",inputs.parameters.branch)}}'
          - "--single-branch"
          - "{{inputs.parameters.repo}}"
          - .
        workingDir: /work
        resources:
          requests:
            cpu: "1"
            memory: 2Gi
        volumeMounts:
          - name: work
            mountPath: /work
    - name: ubuntu-container
      inputs:
        parameters:
          - name: test
          - name: install_k3s_version
          - name: profile
          - name: use-api
      outputs: {}
      metadata: {}
      container:
        name: ""
        image: ubuntu:latest
        command:
          - sh
          - "-c"
        args:
          - >
            echo "Installing dependencies..."

            apt-get update && apt-get install -y curl apt-transport-https
            ca-certificates gnupg lsb-release sudo golang make socat git

            echo "export PATH=$PATH:/usr/local/go/bin" | tee -a

            sudo apt-get install -y lsof

            make --version

            echo "Installing kubectl..."

            curl -LO "https://dl.k8s.io/release/$(curl -L -s
            https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

            chmod +x kubectl

            mv kubectl /usr/local/bin/

            echo "Downloading and configuring Docker..."

            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg
            --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

            echo "deb [arch=amd64
            signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]
            https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            | tee /etc/apt/sources.list.d/docker.list > /dev/null

            apt-get update && apt-get install -y docker-ce docker-ce-cli
            containerd.io

            echo "Waiting for Docker daemon to be ready..."

            until docker info; do sleep 3; done

            echo "Installing k3s..."

            if ! echo {{inputs.parameters.install_k3s_version}} | egrep
            '^v[0-9]+\.[0-9]+\.[0-9]+\+k3s1$'; then
              export INSTALL_K3S_VERSION=v1.31.0+k3s1
            else
              export INSTALL_K3S_VERSION={{inputs.parameters.install_k3s_version}}
            fi

            # Define custom arguments for K3s installation

            export INSTALL_K3S_EXEC="--docker
            --kubelet-arg=config=/work/test/e2e/manifests/kubelet-configuration.yaml"

            # Install K3s

            curl -sfL https://get.k3s.io | sh -s - server

            echo "Starting K3s server in the background..."

            sudo k3s server > /var/log/k3s.log 2>&1 &

            # Wait for K3s to start and generate kubeconfig

            echo "Waiting for K3s cluster to be ready..."

            timeout 300 bash -c 'until [ -f /etc/rancher/k3s/k3s.yaml ]; do echo
            "Waiting..."; sleep 5; done'

            # Verify the kubeconfig file exists

            if [ ! -f /etc/rancher/k3s/k3s.yaml ]; then
              echo "Error: K3s kubeconfig file not found at /etc/rancher/k3s/k3s.yaml"
              exit 1
            fi

            # Set up kubeconfig for kubectl

            echo "Setting up kubeconfig..."

            mkdir -p ~/.kube

            cp /etc/rancher/k3s/k3s.yaml ~/.kube/config

            chmod 600 ~/.kube/config

            # Confirm K3s cluster is operational

            k3s kubectl cluster-info





            echo "Pulling images from docker hub..."

            docker pull
            {{workflow.parameters.image}}{{workflow.parameters.exec-path}}:{{workflow.parameters.tag}}

            docker pull
            {{workflow.parameters.image}}{{workflow.parameters.cli-path}}:{{workflow.parameters.tag}}

            docker images

            echo "Loading images into k3s cluster..."

            docker save
            {{workflow.parameters.image}}{{workflow.parameters.exec-path}}:{{workflow.parameters.tag}}
            -o /tmp/argoexec.tar

            docker save
            {{workflow.parameters.image}}{{workflow.parameters.cli-path}}:{{workflow.parameters.tag}}
            -o /tmp/argocli.tar

            set -eux

            docker load < /tmp/argoexec.tar

            docker load < /tmp/argocli.tar

            echo "Setting up the hosts file..."

            echo '127.0.0.1 dex'      | sudo tee -a /etc/hosts

            echo '127.0.0.1 minio'    | sudo tee -a /etc/hosts

            echo '127.0.0.1 postgres' | sudo tee -a /etc/hosts

            echo '127.0.0.1 mysql'    | sudo tee -a /etc/hosts

            echo '127.0.0.1 azurite'  | sudo tee -a /etc/hosts

            echo "Installing manifests..."

            make -C /work install PROFILE={{inputs.parameters.profile}}
            STATIC_FILES=false

            kubectl get pods -n argo

            echo "Building the controller..."

            make -C /work controller kit STATIC_FILES=false

            if {{inputs.parameters.use-api}}; then
              echo "Building the CLI..."

              make -C /work cli STATIC_FILES=false
            fi

            echo "Starting argo workflow controller & API..."

            make -C /work start PROFILE={{inputs.parameters.profile}}
            AUTH_MODE=client STATIC_FILES=false LOG_LEVEL=info
            API={{inputs.parameters.use-api}} UI=false
            POD_STATUS_CAPTURE_FINALIZER=true > /tmp/argo.log 2>&1 &

            make -C /work wait PROFILE={{inputs.parameters.profile}}
            API={{inputs.parameters.use-api}}

            echo "Running E2E {{inputs.parameters.test}} tests..."

            make -C /work {{inputs.parameters.test}} E2E_SUITE_TIMEOUT=20m
            STATIC_FILES=false
        env:
          - name: DOCKER_HOST
            value: tcp://localhost:2375
        resources:
          requests:
            cpu: "10"
            memory: 10Gi
        volumeMounts:
          - name: work
            mountPath: /work
      sidecars:
        - name: dind
          image: docker:20.10-dind
          env:
            - name: DOCKER_TLS_CERTDIR
          resources: {}
          securityContext:
            privileged: true
          mirrorVolumeMounts: true
  entrypoint: e2e-tests
  arguments:
    parameters:
      - name: repo
        value: https://github.com/argoproj/argo-workflows.git
      - name: branch
        value: refs/heads/main
      - name: exec-path
        value: argoexec
      - name: cli-path
        value: argocli
      - name: image
        value: wesmsl/
      - name: tag
        value: v1
      - name: test-matrix
        value: |
          [
            {
              "test": "test-executor",
              "install_k3s_version": "v1.31.0+k3s1",
              "profile": "minimal",
              "use-api": false
            }
          ]
  serviceAccountName: argo-workflow-sa
  volumeClaimTemplates:
    - metadata:
        name: work
        creationTimestamp: null
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 30Gi
      status: {}
