metadata:
  name: dind-workflow
  namespace: argo-events
  uid: 98288a84-1eb7-48b8-8098-21bc8ae49faa
  resourceVersion: '3061843'
  generation: 64
  creationTimestamp: '2024-10-22T20:14:27Z'
  labels:
    workflows.argoproj.io/creator: system-serviceaccount-argo-argo-server
  managedFields:
    - manager: argo
      operation: Update
      apiVersion: argoproj.io/v1alpha1
      time: '2024-10-24T19:34:39Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:workflows.argoproj.io/creator: {}
        f:spec: {}
spec:
  templates:
    - name: main
      inputs: {}
      outputs: {}
      metadata: {}
      steps:
        - - name: clone-repo
            template: clone-repo
            arguments:
              parameters:
                - name: repo
                  value: '{{workflow.parameters.repo}}'
                - name: branch
                  value: '{{workflow.parameters.branch}}'
        - - name: dind
            template: dind
            arguments:
              parameters:
                - name: cli-image
                  value: '{{workflow.parameters.cli-image}}'
                - name: exec-image
                  value: '{{workflow.parameters.exec-image}}'
    - name: clone-repo
      inputs:
        parameters:
          - name: repo
          - name: branch
      outputs: {}
      metadata: {}
      container:
        name: ''
        image: alpine/git:v2.26.2
        args:
          - clone
          - '--depth'
          - '1'
          - '--branch'
          - '{{=sprig.trimPrefix("refs/heads/",inputs.parameters.branch)}}'
          - '--single-branch'
          - '{{inputs.parameters.repo}}'
          - .
        workingDir: /work
        resources:
          requests:
            cpu: '1'
            memory: 2Gi
        volumeMounts:
          - name: work
            mountPath: /work
    - name: dind
      inputs:
        parameters:
          - name: cli-image
          - name: exec-image
      outputs: {}
      metadata: {}
      container:
        name: ''
        image: ubuntu:latest
        command:
          - sh
          - '-c'
        args:
          - >
            DEBIAN_FRONTEND=noninteractive 

            apt-get update

            # Install dependencies

            echo "Installing dependencies..."

            apt-get install -y curl apt-transport-https ca-certificates gnupg
            lsb-release sudo golang make socat

            echo "export PATH=$PATH:/usr/local/go/bin" | tee -a

            sudo apt-get install -y lsof

            # Test make command

            make --version

            # Increase inotify and file-max limits

            echo "Increasing inotify and file-max limits..."

            sudo sysctl -w fs.inotify.max_user_watches=2097152

            sudo sysctl -w fs.file-max=2097152

            echo "Persisting the changes to /etc/sysctl.conf..."

            echo "fs.inotify.max_user_watches=2097152" | sudo tee -a
            /etc/sysctl.conf

            echo "fs.file-max=2097152" | sudo tee -a /etc/sysctl.conf

            echo "Reloading sysctl settings..."

            sudo sysctl -p

            echo "Increasing file descriptor limits in
            /etc/security/limits.conf..."

            echo "* soft nofile 65536" | sudo tee -a /etc/security/limits.conf

            echo "* hard nofile 65536" | sudo tee -a /etc/security/limits.conf

            # Install k3d

            echo "Installing k3d..."

            curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh
            | bash

            # Install kubectl

            echo "Installing kubectl..."

            curl -LO "https://dl.k8s.io/release/$(curl -L -s
            https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

            chmod +x kubectl

            mv kubectl /usr/local/bin/

            # Download and configure Docker

            echo "Downloading and configuring Docker..."

            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg
            --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

            echo "deb [arch=amd64
            signed-by=/usr/share/keyrings/docker-archive-keyring.gpg]
            https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            | tee /etc/apt/sources.list.d/docker.list > /dev/null

            apt-get update && apt-get install -y docker-ce docker-ce-cli
            containerd.io

            # Wait for Docker 

            echo "Waiting for Docker daemon to be ready..."

            until docker info; do sleep 3; done

            echo "Docker daemon is ready. Running commands..."

            # Configure and increase docker ufile limits - /etc/docker/daemon.json

            echo "Configuring and increasing docker file limits..."

            echo '{ "default-ulimits": { "nofile": { "Name": "nofile", "Hard": 1048576, "Soft": 1048576 } } }' | sudo tee /etc/docker/daemon.json

            # Confirm the docker ufile changes

            echo "Confirming the docker file limit changes..."

            cat /etc/docker/daemon.json

            # Restart Docker

            echo "Restarting Docker..."

            sudo systemctl restart docker 

            # Wait for Docker to be ready

            echo "Waiting for Docker daemon to be ready..."

            until docker info; do sleep 3; done

            # Pull the images from docker hub

            echo "Pulling images from docker hub..."

            docker pull {{inputs.parameters.exec-image}}

            docker pull {{inputs.parameters.cli-image}}

            docker images

            # Create k3d cluster

            echo "Creating k3d cluster..."

            k3d cluster create argo-cluster --kubeconfig-switch-context

            # Wait for k3d cluster to be ready

            echo "Waiting for k3d cluster to be ready..."

            until kubectl cluster-info; do sleep 3; done

            echo "k3d is ready. Running commands..."

            # Merge kubeconfig - set context to k3d cluster

            echo "Merging kubeconfig and switching context to k3d cluster..."

            k3d kubeconfig merge argo-cluster --kubeconfig-switch-context

            kubectl cluster-info

            kubectl version

            # Load the images into the k3d cluster

            echo "Loading images into k3d cluster..."

            docker save {{inputs.parameters.exec-image}} -o /tmp/argoexec.tar

            docker save {{inputs.parameters.cli-image}} -o /tmp/argocli.tar

            docker load < /tmp/argoexec.tar

            docker load < /tmp/argocli.tar

            # Set up the hosts file

            echo "Setting up the hosts file..."

            echo '127.0.0.1 dex'      | sudo tee -a /etc/hosts

            echo '127.0.0.1 minio'    | sudo tee -a /etc/hosts

            echo '127.0.0.1 postgres' | sudo tee -a /etc/hosts

            echo '127.0.0.1 mysql'    | sudo tee -a /etc/hosts

            echo '127.0.0.1 azurite'  | sudo tee -a /etc/hosts

            # Pull the Docker images

            echo "Pulling the Docker images..."

            docker pull argoproj/argocli:latest 

            docker pull argoproj/workflow-controller:latest 

            docker pull argoproj/argoexec:latest

            # Load the Docker images into the k3d cluster

            echo "Loading the Docker images into the k3d cluster..."

            k3d image import argoproj/argocli:latest -c argo-cluster 

            k3d image import argoproj/workflow-controller:latest -c argo-cluster

            k3d image import argoproj/argoexec:latest -c argo-cluster

            # Deploy Argo Workflows to the k3d cluster

            echo "Deploying Argo Workflows to the k3d cluster..."

            kubectl create namespace argo kubectl apply -n argo -f
            https://raw.githubusercontent.com/argoproj/argo-workflows/stable/manifests/install.yaml

            # Use the loaded images in the k3d cluster

            echo "Using the loaded images in the k3d cluster..."

            kubectl set image deployment/argo-server
            argo-server=argoproj/argocli:latest -n argo

            kubectl set image deployment/workflow-controller
            workflow-controller=argoproj/workflow-controller:latest -n argo

            kubectl set image deployment/argoexec
            argoexec=argoproj/argoexec:latest -n argo

            # Refresh the pods with the new images

            echo "Refreshing the pods with the new images..."

            kubectl rollout restart deployment/argo-server -n argo 

            kubectl rollout restart deployment/workflow-controller -n argo

            kubectl rollout restart deployment/argoexec -n argo

            # Wait for the pods to be ready

            echo "Waiting for the pods to be ready..."

            kubectl wait --for=condition=available --timeout=300s

            # Run the Argo Workflows server

            make start PROFILE=minimal AUTH_MODE=client STATIC_FILES=false LOG_LEVEL=info API=false UI=false

            # Wait for the Argo Workflows server to be ready

            echo "Waiting for the Argo Workflows server to be ready..."

            until curl -s localhost:2746; do sleep 3; done

            # Run E2E corefunctional tests

            echo "Running E2E corefunctional tests..."

            make test-corefunctional E2E_SUITE_TIMEOUT=20m STATIC_FILES=false


            # 

            apt-get update

            apt-get install -y curl

            echo "Installing k3d..."

            curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh
            | bash

            k3d cluster create mycluster --api-port 6550 -p
            8080:80@loadbalancer;
            
            # output the cluster kubeconfig into the /kubeconfig file

            k3d kubeconfig get mycluster > /kubeconfig


        workingDir: /work/
        env:
          - name: DOCKER_HOST
            value: tcp://localhost:2375
        resources:
          requests:
            cpu: '8'
            memory: 8Gi
        volumeMounts:
          - name: work
            mountPath: /work
      sidecars:
        - name: dind
          image: docker:20.10-dind
          env:
            - name: DOCKER_TLS_CERTDIR
          resources: {}
          securityContext:
            privileged: true
          mirrorVolumeMounts: true
  entrypoint: main
  arguments:
    parameters:
      - name: repo
        value: https://github.com/konjo-open-src/argo-workflows
      - name: branch
        value: refs/heads/main
      - name: path
        value: argo-workflows
      - name: cli-image
        value: quay.io/argoproj/argocli:latest
      - name: exec-image
        value: quay.io/argoproj/argoexec:latest
  serviceAccountName: operate-workflow-sa
  volumeClaimTemplates:
    - metadata:
        name: work
        creationTimestamp: null
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 5Gi
      status: {}
